// Mocks generated by Mockito 5.4.6 from annotations
// in uic_task/test/features/auth/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:uic_task/core/exceptions/failure.dart' as _i6;
import 'package:uic_task/features/auth/domain/entities/user_entity.dart' as _i7;
import 'package:uic_task/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:uic_task/features/auth/domain/usecases/sign_in_anonymously_usecase.dart'
    as _i9;
import 'package:uic_task/features/auth/domain/usecases/sign_in_usecase.dart'
    as _i4;
import 'package:uic_task/features/auth/domain/usecases/sign_up_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i4.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call(
    _i4.SignInParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}

/// A class which mocks [SignUpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUseCase extends _i1.Mock implements _i8.SignUpUseCase {
  MockSignUpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call(
    _i8.SignUpParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>
  signUpWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#signUpWithEmailAndPassword, [], {
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>
  signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#signInWithEmailAndPassword, [], {
                      #email: email,
                      #password: password,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#signInAnonymously, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#signOut, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> updateUserBio({
    required String? uid,
    required String? fullName,
    required String? nickName,
    required String? phoneNumber,
    required String? gender,
    required DateTime? dateOfBirth,
    required String? address,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserBio, [], {
              #uid: uid,
              #fullName: fullName,
              #nickName: nickName,
              #phoneNumber: phoneNumber,
              #gender: gender,
              #dateOfBirth: dateOfBirth,
              #address: address,
            }),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i6.Failure, _i3.Unit>(
                this,
                Invocation.method(#updateUserBio, [], {
                  #uid: uid,
                  #fullName: fullName,
                  #nickName: nickName,
                  #phoneNumber: phoneNumber,
                  #gender: gender,
                  #dateOfBirth: dateOfBirth,
                  #address: address,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);

  @override
  _i5.Stream<_i7.UserEntity?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i5.Stream<_i7.UserEntity?>.empty(),
          )
          as _i5.Stream<_i7.UserEntity?>);
}

/// A class which mocks [SignInAnonymouslyUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInAnonymouslyUseCase extends _i1.Mock
    implements _i9.SignInAnonymouslyUseCase {
  MockSignInAnonymouslyUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
                  _FakeEither_1<_i6.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}
